
import React, { useEffect, useMemo, useState } from 'react'
type User = { username:string; passHash:string; createdAt:string };
type Slot = { enabled:boolean; start:string; end:string };
type Task = { id:string; title:string; category:string; slot:Slot };
type Check = { id:string; date:string; taskId:string; inTime:boolean; makeUp:boolean };
const uid=()=>Math.random().toString(36).slice(2,10);
const today=()=>{ const d=new Date(); const y=d.getFullYear(), m=String(d.getMonth()+1).padStart(2,'0'), da=String(d.getDate()).padStart(2,'0'); return `${y}-${m}-${da}`; };
const toMin=(hhmm:string)=>{ const [h,m]=hhmm.split(':').map(n=>parseInt(n||'0')); return h*60+m; };
const within=(t:string, s:string, e:string)=>{ const T=toMin(t), S=toMin(s), E=toMin(e); return S<=E? (T>=S && T<=E) : (T>=S || T<=E); };
async function sha256(s:string){ if('crypto' in window && 'subtle' in window.crypto){ const enc=new TextEncoder().encode(s); const buf=await window.crypto.subtle.digest('SHA-256',enc); return Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,'0')).join(''); } return btoa(s); }
const LS={ users:'znldk_users_v1', session:'znldk_session_v1', tasks:(u:string)=>`znldk_${u}_tasks_v1`, checks:(u:string)=>`znldk_${u}_checks_v1` };
function useArrayLS<T>(key:string, init:T[]=[]){ const [v,setV]=useState<T[]>(()=>{ try{ const s=localStorage.getItem(key); return s?JSON.parse(s):init; }catch{return init;} }); useEffect(()=>{ localStorage.setItem(key, JSON.stringify(v)); },[key,v]); return [v,setV] as const; }
export default function App(){
  const [users,setUsers] = useArrayLS<User>(LS.users, []);
  const [session,setSession] = useState<string | null>(()=>localStorage.getItem(LS.session));
  const logged = users.find(u=>u.username===session) || null;
  const [tasks,setTasks] = useArrayLS<Task>(LS.tasks(logged?.username||'__'), []);
  const [checks,setChecks] = useArrayLS<Check>(LS.checks(logged?.username||'__'), []);
  const [tab,setTab] = useState<'tasks'|'stats'|'settings'>('tasks');
  useEffect(()=>{ if(!logged) return; const t=localStorage.getItem(LS.tasks(logged.username)); const c=localStorage.getItem(LS.checks(logged.username)); setTasks(t?JSON.parse(t):[]); setChecks(c?JSON.parse(c):[]); },[logged?.username]);
  if(!logged) return <Auth users={users} setUsers={setUsers} setSession={(u)=>{ setSession(u); localStorage.setItem(LS.session,u); }} />;
  return (<div className="wrap"><div className="banner"><div className="brand"><img src="/src/assets/icon.svg"/><div><h2 className="title">正能量打卡</h2><div style={{opacity:.9}}>欢迎回来，{logged.username}！</div></div></div><div className="row"><button className={'tab '+(tab==='tasks'?'active':'')} onClick={()=>setTab('tasks')}>任务</button><button className={'tab '+(tab==='stats'?'active':'')} onClick={()=>setTab('stats')}>统计</button><button className={'tab '+(tab==='settings'?'active':'')} onClick={()=>setTab('settings')}>设置</button></div></div>{tab==='tasks' && <TasksPanel tasks={tasks} setTasks={setTasks} checks={checks} setChecks={setChecks}/>} {tab==='stats' && <StatsPanel tasks={tasks} checks={checks}/>} {tab==='settings' && <SettingsPanel user={logged} logout={()=>{ localStorage.removeItem(LS.session); location.reload(); }}/>}</div>); }
function Auth({users,setUsers,setSession}:{users:User[]; setUsers:(v:User[])=>void; setSession:(u:string)=>void}){
  const [mode,setMode]=useState<'login'|'signup'>('signup'); const [username,setUsername]=useState(''); const [password,setPassword]=useState('');
  const submit=async()=>{ const u=username.trim(), p=password; if(!u||!p){alert('请输入账号和密码');return;} const h=await sha256(p);
    if(mode==='signup'){ if(users.some(x=>x.username===u)){alert('账号已存在');return;} setUsers([ ...users, {username:u, passHash:h, createdAt:new Date().toISOString()} ]); setSession(u); }
    else{ const hit=users.find(x=>x.username===u&&x.passHash===h); if(!hit){alert('账号或密码错误');return;} setSession(u); } };
  return (<div className="wrap" style={{marginTop:40}}><div className="card" style={{padding:24,maxWidth:520,margin:'0 auto'}}><h2 style={{marginTop:0}}>正能量打卡 · {mode==='signup'?'注册新账号':'登录'}</h2><div className="row" style={{marginTop:10}}><input placeholder="账号" value={username} onChange={e=>setUsername(e.target.value)}/></div><div className="row" style={{marginTop:10}}><input type="password" placeholder="密码" value={password} onChange={e=>setPassword(e.target.value)}/></div><div className="row" style={{marginTop:16,gap:10}}><button className="btn" onClick={submit}>{mode==='signup'?'注册并登录':'登录'}</button><button className="btn ghost" onClick={()=>setMode(mode==='signup'?'login':'signup')}>{mode==='signup'?'我已有账号，去登录':'没有账号？去注册'}</button></div><div className="muted" style={{marginTop:10}}>本应用为本地离线存储，密码仅做本地哈希校验。</div></div></div>); }
function TasksPanel({tasks,setTasks,checks,setChecks}:{tasks:Task[]; setTasks:(v:Task[])=>void; checks:Check[]; setChecks:(v:Check[])=>void}){
  const [title,setTitle]=useState(''); const [cat,setCat]=useState('学习');
  const [slotEnabled,setSlotEnabled]=useState(false); const [slotStart,setSlotStart]=useState('08:00'); const [slotEnd,setSlotEnd]=useState('22:00');
  const add=()=>{ if(!title.trim()){alert('请输入任务名称');return;} setTasks([{ id:uid(), title:title.trim(), category:cat, slot:{enabled:slotEnabled,start:slotStart,end:slotEnd} }, ...tasks]); setTitle(''); };
  const remove=(id:string)=>setTasks(tasks.filter(t=>t.id!==id));
  const doCheck=(taskId:string, date?:string)=>{ const d=date||today(); const now=new Date(); const hhmm=`${String(now.getHours()).padStart(2,'0')}:${String(now.getMinutes()).padStart(2,'0')}`; const tsk=tasks.find(t=>t.id===taskId)!; const inTime=tsk.slot.enabled ? (date? (date===today() && within(hhmm,tsk.slot.start,tsk.slot.end)) : within(hhmm,tsk.slot.start,tsk.slot.end)) : true; const makeUp=!!date && date!==today(); setChecks([{ id:uid(), date:d, taskId, inTime, makeUp }, ...checks]); };
  const lastDays = Array.from({length:7}).map((_,i)=>{ const dt=new Date(); dt.setDate(dt.getDate()-i); return `${dt.getFullYear()}-${String(dt.getMonth()+1).padStart(2,'0')}-${String(dt.getDate()).padStart(2,'0')}`; });
  return (<div className="grid" style={{marginTop:12}}><div className="card" style={{padding:16}}><h3>新增正能量任务</h3><div className="row" style={{flexWrap:'wrap'}}><input placeholder="例如：晨读 / 深蹲 / 背单词" value={title} onChange={e=>setTitle(e.target.value)} style={{flex:1,minWidth:220}}/><select value={cat} onChange={e=>setCat(e.target.value)}><option>学习</option><option>健身</option><option>生活</option><option>其他</option></select><label className="row" style={{gap:6}}><input type="checkbox" checked={slotEnabled} onChange={e=>setSlotEnabled(e.target.checked)}/> 固定时间段</label><input type="time" value={slotStart} disabled={!slotEnabled} onChange={e=>setSlotStart(e.target.value)}/><input type="time" value={slotEnd} disabled={!slotEnabled} onChange={e=>setSlotEnd(e.target.value)}/><button className="btn" onClick={add}>添加</button></div></div><div className="card" style={{padding:16}}><h3>今日任务打卡</h3>{tasks.length===0 && <div className="muted">还没有任务，先在左边添加一个吧～</div>}{tasks.map(t=>(<div key={t.id} className="row" style={{justifyContent:'space-between',borderTop:'1px solid #e5e7eb',padding:'10px 0'}}><div><div style={{fontWeight:700}}>{t.title} <span className="pill">{t.category}</span></div><div className="muted">{t.slot.enabled?`时间段：${t.slot.start}-${t.slot.end}`:'任意时间均可完成'}</div></div><div className="row"><button className="btn" onClick={()=>doCheck(t.id)}>打卡</button><div className="row"><select id={'mk_'+t.id} defaultValue={lastDays[1]}>{lastDays.map(s=><option key={s} value={s}>{s}</option>)}</select><button className="btn ghost" onClick={()=>{ const sel=(document.getElementById('mk_'+t.id) as HTMLSelectElement).value; doCheck(t.id, sel); }}>补做</button></div><button className="btn secondary" onClick={()=>remove(t.id)}>删除</button></div></div>))}</div></div>);
}
function StatsPanel({tasks,checks}:{tasks:Task[]; checks:Check[]}){
  const byDay = useMemo(()=>{ const m:Record<string,number>={}; for(const c of checks){ m[c.date]=(m[c.date]||0)+1; } return m; },[checks]);
  const perTask = useMemo(()=>{ const m:Record<string,number>={}; for(const c of checks){ m[c.taskId]=(m[c.taskId]||0)+1; } return m; },[checks]);
  const daysBack=(n:number)=>{ const res:string[]=[]; const d=new Date(); for(let i=n-1;i>=0;i--){ const x=new Date(d); x.setDate(x.getDate()-i); res.push(`${x.getFullYear()}-${String(x.getMonth()+1).padStart(2,'0')}-${String(x.getDate()).padStart(2,'0')}`);} return res; };
  const makeSeries=(keys:string[])=>keys.map(k=>({key:k,value:byDay[k]||0}));
  const week=makeSeries(daysBack(7)), month=makeSeries(daysBack(30)), quarter=makeSeries(daysBack(90));
  const taskRows = tasks.map(t=>({title:t.title,count:perTask[t.id]||0,slot:t.slot.enabled?`${t.slot.start}-${t.slot.end}`:'任意'})).sort((a,b)=>b.count-a.count);
  const Line=({series,label}:{series:{key:string;value:number}[];label:string})=>{ const max=Math.max(1,...series.map(s=>s.value)); const W=640,H=180,P=28,step=(W-2*P)/Math.max(1,series.length-1); const d=series.map((s,i)=>{ const x=P+i*step; const y=H-P-(s.value/max)*(H-2*P); return `${i===0?'M':'L'} ${x} ${y}`; }).join(' ');
    return (<div className="card" style={{padding:16}}><div className="row" style={{justifyContent:'space-between'}}><h3 style={{margin:0}}>{label}</h3><div className="muted">总计 {series.reduce((a,b)=>a+b.value,0)}</div></div><svg width={W} height={H} style={{maxWidth:'100%'}}><rect x="0" y="0" width={W} height={H} fill="#fff" rx="12" stroke="#e5e7eb"/><path d={d} fill="none" stroke="#2563eb" strokeWidth="3"/>{series.map((s,i)=>{ const x=P+i*step; const y=H-P-(s.value/max)*(H-2*P); return <circle key={i} cx={x} cy={y} r={3} fill="#2563eb"/>; })}{series.map((s,i)=>{ const x=P+i*step; return <text key={'t'+i} x={x} y={H-8} fontSize="10" textAnchor="middle" fill="#64748b">{s.key.slice(5)}</text>; })}</svg></div>); };
  return (<div className="grid" style={{marginTop:12}}><Line series={week} label="最近 7 天 · 每日完成数"/><Line series={month} label="最近 30 天 · 每日完成数"/><Line series={quarter} label="最近 90 天 · 每日完成数"/><div className="card" style={{padding:16}}><h3>各任务累计完成次数</h3><table><thead><tr><th style={{textAlign:'left'}}>任务</th><th>累计次数</th><th>时间段</th></tr></thead><tbody>{taskRows.map((r,i)=>(<tr key={i}><td style={{textAlign:'left'}}>{r.title}</td><td>{r.count}</td><td>{r.slot}</td></tr>))}{taskRows.length===0&&<tr><td colSpan={3}><span className="muted">暂无数据</span></td></tr>}</tbody></table></div></div>);
}
function SettingsPanel({user,logout}:{user:{username:string}; logout:()=>void}){
  return (<div className="card" style={{padding:16, marginTop:12}}><h3>账户设置</h3><div className="row"><div>当前账号：</div><strong>{user.username}</strong></div><div className="row" style={{marginTop:12, gap:8}}><button className="btn ghost" onClick={()=>{
    const data = JSON.stringify({tasks: JSON.parse(localStorage.getItem(`znldk_${user.username}_tasks_v1`)||'[]'), checks: JSON.parse(localStorage.getItem(`znldk_${user.username}_checks_v1`)||'[]')}, null, 2);
    const blob = new Blob([data],{type:'application/json'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=`正能量打卡-备份-${user.username}.json`; a.click();
  }}>导出备份</button><label className="btn ghost" style={{position:'relative'}}>导入备份<input type="file" accept="application/json" style={{position:'absolute',inset:0,opacity:0}} onChange={e=>{
    const f=e.target.files?.[0]; if(!f) return; const rd=new FileReader(); rd.onload=()=>{ try{ const obj=JSON.parse(String(rd.result||'{}')); if(obj.tasks) localStorage.setItem(`znldk_${user.username}_tasks_v1`, JSON.stringify(obj.tasks)); if(obj.checks) localStorage.setItem(`znldk_${user.username}_checks_v1`, JSON.stringify(obj.checks)); alert('导入成功'); location.reload(); }catch{ alert('导入失败'); } }; rd.readAsText(f);
  }}/></label><button className="btn secondary" onClick={logout}>退出登录</button></div><div className="muted" style={{marginTop:8}}>数据仅保存在本机（离线可用），登录用于切换本地账户与自动登录。</div></div>);
}
